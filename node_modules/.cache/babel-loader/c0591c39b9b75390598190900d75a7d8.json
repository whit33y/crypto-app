{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport GoTrueApi from './GoTrueApi';\nimport { isBrowser, getParameterByName, uuid, setItemAsync, removeItemAsync, getItemSynchronously, getItemAsync } from './lib/helpers';\nimport { GOTRUE_URL, DEFAULT_HEADERS, STORAGE_KEY, EXPIRY_MARGIN, NETWORK_FAILURE } from './lib/constants';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\nexport default class GoTrueClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param options.url The URL of the GoTrue server.\n   * @param options.headers Any additional headers to send to the GoTrue server.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.cookieOptions\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(options) {\n    this.stateChangeEmitters = new Map();\n    this.networkRetries = 0;\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.currentUser = null;\n    this.currentSession = null;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.multiTab = settings.multiTab;\n    this.localStorage = settings.localStorage || globalThis.localStorage;\n    this.api = new GoTrueApi({\n      url: settings.url,\n      headers: settings.headers,\n      cookieOptions: settings.cookieOptions,\n      fetch: settings.fetch\n    });\n\n    this._recoverSession();\n\n    this._recoverAndRefresh();\n\n    this._listenForMultiTabEvents();\n\n    this._handleVisibilityChange();\n\n    if (settings.detectSessionInUrl && isBrowser() && !!getParameterByName('access_token')) {\n      // Handle the OAuth redirect\n      this.getSessionFromUrl({\n        storeSession: true\n      }).then(_ref => {\n        let {\n          error\n        } = _ref;\n\n        if (error) {\n          throw new Error('Error getting session from URL.');\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new user.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param password The user's password.\n   * @param phone The user's phone number.\n   * @param redirectTo The redirect URL attached to the signup confirmation link. Does not redirect the user if it's a mobile signup.\n   * @param data Optional user metadata.\n   */\n\n\n  signUp(_ref2) {\n    let {\n      email,\n      password,\n      phone\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        const {\n          data,\n          error\n        } = phone && password ? yield this.api.signUpWithPhone(phone, password, {\n          data: options.data,\n          captchaToken: options.captchaToken\n        }) : yield this.api.signUpWithEmail(email, password, {\n          redirectTo: options.redirectTo,\n          data: options.data,\n          captchaToken: options.captchaToken\n        });\n\n        if (error) {\n          throw error;\n        }\n\n        if (!data) {\n          throw 'An error occurred on sign up.';\n        }\n\n        let session = null;\n        let user = null;\n\n        if (data.access_token) {\n          session = data;\n          user = session.user;\n\n          this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        if (data.id) {\n          user = data;\n        }\n\n        return {\n          user,\n          session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Log in an existing user, or login via a third-party provider.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param password The user's password.\n   * @param refreshToken A valid refresh token that was returned on login.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL to send the user to after they are confirmed (OAuth logins only).\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n\n\n  signIn(_ref3) {\n    let {\n      email,\n      phone,\n      password,\n      refreshToken,\n      provider,\n      oidc\n    } = _ref3;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        if (email && !password) {\n          const {\n            error\n          } = yield this.api.sendMagicLinkEmail(email, {\n            redirectTo: options.redirectTo,\n            shouldCreateUser: options.shouldCreateUser,\n            captchaToken: options.captchaToken\n          });\n          return {\n            user: null,\n            session: null,\n            error\n          };\n        }\n\n        if (email && password) {\n          return this._handleEmailSignIn(email, password, {\n            redirectTo: options.redirectTo,\n            captchaToken: options.captchaToken\n          });\n        }\n\n        if (phone && !password) {\n          const {\n            error\n          } = yield this.api.sendMobileOTP(phone, {\n            shouldCreateUser: options.shouldCreateUser,\n            captchaToken: options.captchaToken\n          });\n          return {\n            user: null,\n            session: null,\n            error\n          };\n        }\n\n        if (phone && password) {\n          return this._handlePhoneSignIn(phone, password);\n        }\n\n        if (refreshToken) {\n          // currentSession and currentUser will be updated to latest on _callRefreshToken using the passed refreshToken\n          const {\n            error\n          } = yield this._callRefreshToken(refreshToken);\n          if (error) throw error;\n          return {\n            user: this.currentUser,\n            session: this.currentSession,\n            error: null\n          };\n        }\n\n        if (provider) {\n          return this._handleProviderSignIn(provider, {\n            redirectTo: options.redirectTo,\n            scopes: options.scopes,\n            queryParams: options.queryParams\n          });\n        }\n\n        if (oidc) {\n          return this._handleOpenIDConnectSignIn(oidc);\n        }\n\n        throw new Error(`You must provide either an email, phone number, a third-party provider or OpenID Connect.`);\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param token The user's password.\n   * @param type The user's verification type.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  verifyOTP(params) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        const {\n          data,\n          error\n        } = yield this.api.verifyOTP(params, options);\n\n        if (error) {\n          throw error;\n        }\n\n        if (!data) {\n          throw 'An error occurred on token verification.';\n        }\n\n        let session = null;\n        let user = null;\n\n        if (data.access_token) {\n          session = data;\n          user = session.user;\n\n          this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        if (data.id) {\n          user = data;\n        }\n\n        return {\n          user,\n          session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n   *\n   * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n   */\n\n\n  user() {\n    return this.currentUser;\n  }\n  /**\n   * Returns the session data, if there is an active session.\n   */\n\n\n  session() {\n    return this.currentSession;\n  }\n  /**\n   * Force refreshes the session including the user data in case it was updated in a different session.\n   */\n\n\n  refreshSession() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token)) throw new Error('Not logged in.'); // currentSession and currentUser will be updated to latest on _callRefreshToken\n\n        const {\n          error\n        } = yield this._callRefreshToken();\n        if (error) throw error;\n        return {\n          data: this.currentSession,\n          user: this.currentUser,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n\n\n  update(attributes) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token)) throw new Error('Not logged in.');\n        const {\n          user,\n          error\n        } = yield this.api.updateUser(this.currentSession.access_token, attributes);\n        if (error) throw error;\n        if (!user) throw Error('Invalid user data.');\n        const session = Object.assign(Object.assign({}, this.currentSession), {\n          user\n        });\n\n        this._saveSession(session);\n\n        this._notifyAllSubscribers('USER_UPDATED');\n\n        return {\n          data: user,\n          user,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Sets the session data from refresh_token and returns current Session and Error\n   * @param refresh_token a JWT token\n   */\n\n\n  setSession(refresh_token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!refresh_token) {\n          throw new Error('No current session.');\n        }\n\n        const {\n          data,\n          error\n        } = yield this.api.refreshAccessToken(refresh_token);\n\n        if (error) {\n          return {\n            session: null,\n            error: error\n          };\n        }\n\n        this._saveSession(data);\n\n        this._notifyAllSubscribers('SIGNED_IN');\n\n        return {\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          error: e,\n          session: null\n        };\n      }\n    });\n  }\n  /**\n   * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n   * @param access_token a jwt access token\n   */\n\n\n  setAuth(access_token) {\n    this.currentSession = Object.assign(Object.assign({}, this.currentSession), {\n      access_token,\n      token_type: 'bearer',\n      user: this.user()\n    });\n\n    this._notifyAllSubscribers('TOKEN_REFRESHED');\n\n    return this.currentSession;\n  }\n  /**\n   * Gets the session data from a URL string\n   * @param options.storeSession Optionally store the session in the browser\n   */\n\n\n  getSessionFromUrl(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!isBrowser()) throw new Error('No browser detected.');\n        const error_description = getParameterByName('error_description');\n        if (error_description) throw new Error(error_description);\n        const provider_token = getParameterByName('provider_token');\n        const access_token = getParameterByName('access_token');\n        if (!access_token) throw new Error('No access_token detected.');\n        const expires_in = getParameterByName('expires_in');\n        if (!expires_in) throw new Error('No expires_in detected.');\n        const refresh_token = getParameterByName('refresh_token');\n        if (!refresh_token) throw new Error('No refresh_token detected.');\n        const token_type = getParameterByName('token_type');\n        if (!token_type) throw new Error('No token_type detected.');\n        const timeNow = Math.round(Date.now() / 1000);\n        const expires_at = timeNow + parseInt(expires_in);\n        const {\n          user,\n          error\n        } = yield this.api.getUser(access_token);\n        if (error) throw error;\n        const session = {\n          provider_token,\n          access_token,\n          expires_in: parseInt(expires_in),\n          expires_at,\n          refresh_token,\n          token_type,\n          user: user\n        };\n\n        if (options === null || options === void 0 ? void 0 : options.storeSession) {\n          this._saveSession(session);\n\n          const recoveryMode = getParameterByName('type');\n\n          this._notifyAllSubscribers('SIGNED_IN');\n\n          if (recoveryMode === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY');\n          }\n        } // Remove tokens from URL\n\n\n        window.location.hash = '';\n        return {\n          data: session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`. There is no way to revoke a user's session JWT before it automatically expires\n   */\n\n\n  signOut() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = (_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token;\n\n      this._removeSession();\n\n      this._notifyAllSubscribers('SIGNED_OUT');\n\n      if (accessToken) {\n        const {\n          error\n        } = yield this.api.signOut(accessToken);\n        if (error) return {\n          error\n        };\n      }\n\n      return {\n        error: null\n      };\n    });\n  }\n  /**\n   * Receive a notification every time an auth event happens.\n   * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n   */\n\n\n  onAuthStateChange(callback) {\n    try {\n      const id = uuid();\n      const subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this.stateChangeEmitters.delete(id);\n        }\n      };\n      this.stateChangeEmitters.set(id, subscription);\n      return {\n        data: subscription,\n        error: null\n      };\n    } catch (e) {\n      return {\n        data: null,\n        error: e\n      };\n    }\n  }\n\n  _handleEmailSignIn(email, password) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield this.api.signInWithEmail(email, password, {\n          redirectTo: options.redirectTo,\n          captchaToken: options.captchaToken\n        });\n        if (error || !data) return {\n          data: null,\n          user: null,\n          session: null,\n          error\n        };\n\n        if (((_a = data === null || data === void 0 ? void 0 : data.user) === null || _a === void 0 ? void 0 : _a.confirmed_at) || ((_b = data === null || data === void 0 ? void 0 : data.user) === null || _b === void 0 ? void 0 : _b.email_confirmed_at)) {\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        return {\n          data,\n          user: data.user,\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _handlePhoneSignIn(phone, password) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield this.api.signInWithPhone(phone, password, options);\n        if (error || !data) return {\n          data: null,\n          user: null,\n          session: null,\n          error\n        };\n\n        if ((_a = data === null || data === void 0 ? void 0 : data.user) === null || _a === void 0 ? void 0 : _a.phone_confirmed_at) {\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        return {\n          data,\n          user: data.user,\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _handleProviderSignIn(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = this.api.getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams\n    });\n\n    try {\n      // try to open on the browser\n      if (isBrowser()) {\n        window.location.href = url;\n      }\n\n      return {\n        provider,\n        url,\n        data: null,\n        session: null,\n        user: null,\n        error: null\n      };\n    } catch (e) {\n      // fallback to returning the URL\n      if (url) return {\n        provider,\n        url,\n        data: null,\n        session: null,\n        user: null,\n        error: null\n      };\n      return {\n        data: null,\n        user: null,\n        session: null,\n        error: e\n      };\n    }\n  }\n\n  _handleOpenIDConnectSignIn(_ref4) {\n    let {\n      id_token,\n      nonce,\n      client_id,\n      issuer,\n      provider\n    } = _ref4;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (id_token && nonce && (client_id && issuer || provider)) {\n        try {\n          const {\n            data,\n            error\n          } = yield this.api.signInWithOpenIDConnect({\n            id_token,\n            nonce,\n            client_id,\n            issuer,\n            provider\n          });\n          if (error || !data) return {\n            user: null,\n            session: null,\n            error\n          };\n\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n\n          return {\n            user: data.user,\n            session: data,\n            error: null\n          };\n        } catch (e) {\n          return {\n            user: null,\n            session: null,\n            error: e\n          };\n        }\n      }\n\n      throw new Error(`You must provide a OpenID Connect provider with your id token and nonce.`);\n    });\n  }\n  /**\n   * Attempts to get the session from LocalStorage\n   * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n   */\n\n\n  _recoverSession() {\n    try {\n      const data = getItemSynchronously(this.localStorage, STORAGE_KEY);\n      if (!data) return null;\n      const {\n        currentSession,\n        expiresAt\n      } = data;\n      const timeNow = Math.round(Date.now() / 1000);\n\n      if (expiresAt >= timeNow + EXPIRY_MARGIN && (currentSession === null || currentSession === void 0 ? void 0 : currentSession.user)) {\n        this._saveSession(currentSession);\n\n        this._notifyAllSubscribers('SIGNED_IN');\n      }\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n\n\n  _recoverAndRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield getItemAsync(this.localStorage, STORAGE_KEY);\n        if (!data) return null;\n        const {\n          currentSession,\n          expiresAt\n        } = data;\n        const timeNow = Math.round(Date.now() / 1000);\n\n        if (expiresAt < timeNow + EXPIRY_MARGIN) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            this.networkRetries++;\n            const {\n              error\n            } = yield this._callRefreshToken(currentSession.refresh_token);\n\n            if (error) {\n              console.log(error.message);\n\n              if (error.message === NETWORK_FAILURE.ERROR_MESSAGE && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES) {\n                if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n                this.refreshTokenTimer = setTimeout(() => this._recoverAndRefresh(), Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100 // exponential backoff\n                );\n                return;\n              }\n\n              yield this._removeSession();\n            }\n\n            this.networkRetries = 0;\n          } else {\n            this._removeSession();\n          }\n        } else if (!currentSession) {\n          console.log('Current session is missing data.');\n\n          this._removeSession();\n        } else {\n          // should be handled on _recoverSession method already\n          // But we still need the code here to accommodate for AsyncStorage e.g. in React native\n          this._saveSession(currentSession);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n      } catch (err) {\n        console.error(err);\n        return null;\n      }\n    });\n  }\n\n  _callRefreshToken(refresh_token) {\n    var _a;\n\n    if (refresh_token === void 0) {\n      refresh_token = (_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.refresh_token;\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!refresh_token) {\n          throw new Error('No current session.');\n        }\n\n        const {\n          data,\n          error\n        } = yield this.api.refreshAccessToken(refresh_token);\n        if (error) throw error;\n        if (!data) throw Error('Invalid session data.');\n\n        this._saveSession(data);\n\n        this._notifyAllSubscribers('TOKEN_REFRESHED');\n\n        this._notifyAllSubscribers('SIGNED_IN');\n\n        return {\n          data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _notifyAllSubscribers(event) {\n    this.stateChangeEmitters.forEach(x => x.callback(event, this.currentSession));\n  }\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n\n\n  _saveSession(session) {\n    this.currentSession = session;\n    this.currentUser = session.user;\n    const expiresAt = session.expires_at;\n\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000);\n      const expiresIn = expiresAt - timeNow;\n      const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5;\n\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000);\n    } // Do we need any extra check before persist session\n    // access_token or user ?\n\n\n    if (this.persistSession && session.expires_at) {\n      this._persistSession(this.currentSession);\n    }\n  }\n\n  _persistSession(currentSession) {\n    const data = {\n      currentSession,\n      expiresAt: currentSession.expires_at\n    };\n    setItemAsync(this.localStorage, STORAGE_KEY, data);\n  }\n\n  _removeSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.currentSession = null;\n      this.currentUser = null;\n      if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n      removeItemAsync(this.localStorage, STORAGE_KEY);\n    });\n  }\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds\n   */\n\n\n  _startAutoRefreshToken(value) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n    if (value <= 0 || !this.autoRefreshToken) return;\n    this.refreshTokenTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n      this.networkRetries++;\n      const {\n        error\n      } = yield this._callRefreshToken();\n      if (!error) this.networkRetries = 0;\n      if ((error === null || error === void 0 ? void 0 : error.message) === NETWORK_FAILURE.ERROR_MESSAGE && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES) this._startAutoRefreshToken(Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100); // exponential backoff\n    }), value);\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref();\n  }\n  /**\n   * Listens for changes to LocalStorage and updates the current session.\n   */\n\n\n  _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return false;\n    }\n\n    try {\n      window === null || window === void 0 ? void 0 : window.addEventListener('storage', e => {\n        var _a;\n\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue));\n\n          if ((_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) {\n            this._saveSession(newSession.currentSession);\n\n            this._notifyAllSubscribers('SIGNED_IN');\n          } else {\n            this._removeSession();\n\n            this._notifyAllSubscribers('SIGNED_OUT');\n          }\n        }\n      });\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error);\n    }\n  }\n\n  _handleVisibilityChange() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return false;\n    }\n\n    try {\n      window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible') {\n          this._recoverAndRefresh();\n        }\n      });\n    } catch (error) {\n      console.error('_handleVisibilityChange', error);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["GoTrueApi","isBrowser","getParameterByName","uuid","setItemAsync","removeItemAsync","getItemSynchronously","getItemAsync","GOTRUE_URL","DEFAULT_HEADERS","STORAGE_KEY","EXPIRY_MARGIN","NETWORK_FAILURE","polyfillGlobalThis","DEFAULT_OPTIONS","url","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","GoTrueClient","constructor","options","Map","settings","currentUser","currentSession","localStorage","globalThis","api","cookieOptions","fetch","_recoverSession","_recoverAndRefresh","_listenForMultiTabEvents","_handleVisibilityChange","getSessionFromUrl","storeSession","then","error","Error","signUp","email","password","phone","_removeSession","data","signUpWithPhone","captchaToken","signUpWithEmail","redirectTo","session","user","access_token","_saveSession","_notifyAllSubscribers","id","e","signIn","refreshToken","provider","oidc","sendMagicLinkEmail","shouldCreateUser","_handleEmailSignIn","sendMobileOTP","_handlePhoneSignIn","_callRefreshToken","_handleProviderSignIn","scopes","queryParams","_handleOpenIDConnectSignIn","verifyOTP","params","refreshSession","_a","update","attributes","updateUser","setSession","refresh_token","refreshAccessToken","setAuth","Object","token_type","error_description","provider_token","expires_in","timeNow","Math","round","Date","now","expires_at","parseInt","getUser","recoveryMode","window","location","hash","signOut","accessToken","onAuthStateChange","callback","subscription","unsubscribe","stateChangeEmitters","delete","set","signInWithEmail","confirmed_at","_b","email_confirmed_at","signInWithPhone","phone_confirmed_at","getUrlForProvider","href","id_token","nonce","client_id","issuer","signInWithOpenIDConnect","expiresAt","console","log","networkRetries","message","ERROR_MESSAGE","MAX_RETRIES","refreshTokenTimer","clearTimeout","setTimeout","RETRY_INTERVAL","err","event","forEach","x","expiresIn","refreshDurationBeforeExpires","_startAutoRefreshToken","_persistSession","value","__awaiter","unref","addEventListener","key","newSession","JSON","parse","String","newValue","document","visibilityState"],"sources":["/Users/kuba/Documents/react-project/crypto-app/node_modules/@supabase/gotrue-js/src/GoTrueClient.ts"],"sourcesContent":["import GoTrueApi from './GoTrueApi'\nimport {\n  isBrowser,\n  getParameterByName,\n  uuid,\n  setItemAsync,\n  removeItemAsync,\n  getItemSynchronously,\n  getItemAsync,\n} from './lib/helpers'\nimport {\n  GOTRUE_URL,\n  DEFAULT_HEADERS,\n  STORAGE_KEY,\n  EXPIRY_MARGIN,\n  NETWORK_FAILURE,\n} from './lib/constants'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport { Fetch } from './lib/fetch'\n\nimport type {\n  ApiError,\n  Session,\n  User,\n  UserAttributes,\n  Provider,\n  Subscription,\n  AuthChangeEvent,\n  CookieOptions,\n  UserCredentials,\n  VerifyOTPParams,\n  OpenIDConnectCredentials,\n  SupportedStorage,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue API methods.\n   * These can be used for example to get a user from a JWT in a server environment or reset a user's password.\n   */\n  api: GoTrueApi\n  /**\n   * The currently logged in user or null.\n   */\n  protected currentUser: User | null\n  /**\n   * The session object for the currently logged in user or null.\n   */\n  protected currentSession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected localStorage: SupportedStorage\n  protected multiTab: boolean\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected refreshTokenTimer?: ReturnType<typeof setTimeout>\n  protected networkRetries: number = 0\n\n  /**\n   * Create a new client for use in the browser.\n   * @param options.url The URL of the GoTrue server.\n   * @param options.headers Any additional headers to send to the GoTrue server.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.cookieOptions\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(options: {\n    url?: string\n    headers?: { [key: string]: string }\n    detectSessionInUrl?: boolean\n    autoRefreshToken?: boolean\n    persistSession?: boolean\n    localStorage?: SupportedStorage\n    multiTab?: boolean\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.currentUser = null\n    this.currentSession = null\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.multiTab = settings.multiTab\n    this.localStorage = settings.localStorage || globalThis.localStorage\n    this.api = new GoTrueApi({\n      url: settings.url,\n      headers: settings.headers,\n      cookieOptions: settings.cookieOptions,\n      fetch: settings.fetch,\n    })\n    this._recoverSession()\n    this._recoverAndRefresh()\n    this._listenForMultiTabEvents()\n    this._handleVisibilityChange()\n\n    if (settings.detectSessionInUrl && isBrowser() && !!getParameterByName('access_token')) {\n      // Handle the OAuth redirect\n      this.getSessionFromUrl({ storeSession: true }).then(({ error }) => {\n        if (error) {\n          throw new Error('Error getting session from URL.')\n        }\n      })\n    }\n  }\n\n  /**\n   * Creates a new user.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param password The user's password.\n   * @param phone The user's phone number.\n   * @param redirectTo The redirect URL attached to the signup confirmation link. Does not redirect the user if it's a mobile signup.\n   * @param data Optional user metadata.\n   */\n  async signUp(\n    { email, password, phone }: UserCredentials,\n    options: {\n      redirectTo?: string\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } =\n        phone && password\n          ? await this.api.signUpWithPhone(phone!, password!, {\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n          : await this.api.signUpWithEmail(email!, password!, {\n              redirectTo: options.redirectTo,\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on sign up.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in an existing user, or login via a third-party provider.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param password The user's password.\n   * @param refreshToken A valid refresh token that was returned on login.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL to send the user to after they are confirmed (OAuth logins only).\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  async signIn(\n    { email, phone, password, refreshToken, provider, oidc }: UserCredentials,\n    options: {\n      redirectTo?: string\n      shouldCreateUser?: boolean\n      scopes?: string\n      captchaToken?: string\n      queryParams?: { [key: string]: string }\n    } = {}\n  ): Promise<{\n    session: Session | null\n    user: User | null\n    provider?: Provider\n    url?: string | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      if (email && !password) {\n        const { error } = await this.api.sendMagicLinkEmail(email, {\n          redirectTo: options.redirectTo,\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (email && password) {\n        return this._handleEmailSignIn(email, password, {\n          redirectTo: options.redirectTo,\n          captchaToken: options.captchaToken,\n        })\n      }\n      if (phone && !password) {\n        const { error } = await this.api.sendMobileOTP(phone, {\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (phone && password) {\n        return this._handlePhoneSignIn(phone, password)\n      }\n      if (refreshToken) {\n        // currentSession and currentUser will be updated to latest on _callRefreshToken using the passed refreshToken\n        const { error } = await this._callRefreshToken(refreshToken)\n        if (error) throw error\n\n        return {\n          user: this.currentUser,\n          session: this.currentSession,\n          error: null,\n        }\n      }\n      if (provider) {\n        return this._handleProviderSignIn(provider, {\n          redirectTo: options.redirectTo,\n          scopes: options.scopes,\n          queryParams: options.queryParams,\n        })\n      }\n      if (oidc) {\n        return this._handleOpenIDConnectSignIn(oidc)\n      }\n      throw new Error(\n        `You must provide either an email, phone number, a third-party provider or OpenID Connect.`\n      )\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param token The user's password.\n   * @param type The user's verification type.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyOTP(\n    params: VerifyOTPParams,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } = await this.api.verifyOTP(params, options)\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n   *\n   * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n   */\n  user(): User | null {\n    return this.currentUser\n  }\n\n  /**\n   * Returns the session data, if there is an active session.\n   */\n  session(): Session | null {\n    return this.currentSession\n  }\n\n  /**\n   * Force refreshes the session including the user data in case it was updated in a different session.\n   */\n  async refreshSession(): Promise<{\n    data: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      // currentSession and currentUser will be updated to latest on _callRefreshToken\n      const { error } = await this._callRefreshToken()\n      if (error) throw error\n\n      return { data: this.currentSession, user: this.currentUser, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n  async update(\n    attributes: UserAttributes\n  ): Promise<{ data: User | null; user: User | null; error: ApiError | null }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      const { user, error } = await this.api.updateUser(\n        this.currentSession.access_token,\n        attributes\n      )\n      if (error) throw error\n      if (!user) throw Error('Invalid user data.')\n\n      const session = { ...this.currentSession, user }\n      this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED')\n\n      return { data: user, user, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sets the session data from refresh_token and returns current Session and Error\n   * @param refresh_token a JWT token\n   */\n  async setSession(\n    refresh_token: string\n  ): Promise<{ session: Session | null; error: ApiError | null }> {\n    try {\n      if (!refresh_token) {\n        throw new Error('No current session.')\n      }\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) {\n        return { session: null, error: error }\n      }\n\n      this._saveSession(data!)\n      this._notifyAllSubscribers('SIGNED_IN')\n      return { session: data, error: null }\n    } catch (e) {\n      return { error: e as ApiError, session: null }\n    }\n  }\n\n  /**\n   * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n   * @param access_token a jwt access token\n   */\n  setAuth(access_token: string): Session {\n    this.currentSession = {\n      ...this.currentSession,\n      access_token,\n      token_type: 'bearer',\n      user: this.user(),\n    }\n\n    this._notifyAllSubscribers('TOKEN_REFRESHED')\n\n    return this.currentSession\n  }\n\n  /**\n   * Gets the session data from a URL string\n   * @param options.storeSession Optionally store the session in the browser\n   */\n  async getSessionFromUrl(options?: {\n    storeSession?: boolean\n  }): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      if (!isBrowser()) throw new Error('No browser detected.')\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) throw new Error(error_description)\n\n      const provider_token = getParameterByName('provider_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new Error('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new Error('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new Error('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new Error('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { user, error } = await this.api.getUser(access_token)\n      if (error) throw error\n\n      const session: Session = {\n        provider_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user: user!,\n      }\n      if (options?.storeSession) {\n        this._saveSession(session)\n        const recoveryMode = getParameterByName('type')\n        this._notifyAllSubscribers('SIGNED_IN')\n        if (recoveryMode === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY')\n        }\n      }\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`. There is no way to revoke a user's session JWT before it automatically expires\n   */\n  async signOut(): Promise<{ error: ApiError | null }> {\n    const accessToken = this.currentSession?.access_token\n    this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT')\n    if (accessToken) {\n      const { error } = await this.api.signOut(accessToken)\n      if (error) return { error }\n    }\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: Subscription | null\n    error: ApiError | null\n  } {\n    try {\n      const id: string = uuid()\n      const subscription: Subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this.stateChangeEmitters.delete(id)\n        },\n      }\n      this.stateChangeEmitters.set(id, subscription)\n      return { data: subscription, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleEmailSignIn(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ) {\n    try {\n      const { data, error } = await this.api.signInWithEmail(email, password, {\n        redirectTo: options.redirectTo,\n        captchaToken: options.captchaToken,\n      })\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.confirmed_at || data?.user?.email_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handlePhoneSignIn(\n    phone: string,\n    password: string,\n    options: {\n      captchaToken?: string\n    } = {}\n  ) {\n    try {\n      const { data, error } = await this.api.signInWithPhone(phone, password, options)\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.phone_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    } = {}\n  ) {\n    const url: string = this.api.getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n\n    try {\n      // try to open on the browser\n      if (isBrowser()) {\n        window.location.href = url\n      }\n      return { provider, url, data: null, session: null, user: null, error: null }\n    } catch (e) {\n      // fallback to returning the URL\n      if (url) return { provider, url, data: null, session: null, user: null, error: null }\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleOpenIDConnectSignIn({\n    id_token,\n    nonce,\n    client_id,\n    issuer,\n    provider,\n  }: OpenIDConnectCredentials): Promise<{\n    session: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    if (id_token && nonce && ((client_id && issuer) || provider)) {\n      try {\n        const { data, error } = await this.api.signInWithOpenIDConnect({\n          id_token,\n          nonce,\n          client_id,\n          issuer,\n          provider,\n        })\n        if (error || !data) return { user: null, session: null, error }\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n        return { user: data.user, session: data, error: null }\n      } catch (e) {\n        return { user: null, session: null, error: e as ApiError }\n      }\n    }\n    throw new Error(`You must provide a OpenID Connect provider with your id token and nonce.`)\n  }\n\n  /**\n   * Attempts to get the session from LocalStorage\n   * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n   */\n  private _recoverSession() {\n    try {\n      const data = getItemSynchronously(this.localStorage, STORAGE_KEY)\n      if (!data) return null\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt >= timeNow + EXPIRY_MARGIN && currentSession?.user) {\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const data = await getItemAsync(this.localStorage, STORAGE_KEY)\n      if (!data) return null\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          this.networkRetries++\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n          if (error) {\n            console.log(error.message)\n            if (\n              error.message === NETWORK_FAILURE.ERROR_MESSAGE &&\n              this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n            ) {\n              if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n              this.refreshTokenTimer = setTimeout(\n                () => this._recoverAndRefresh(),\n                NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100 // exponential backoff\n              )\n              return\n            }\n            await this._removeSession()\n          }\n          this.networkRetries = 0\n        } else {\n          this._removeSession()\n        }\n      } else if (!currentSession) {\n        console.log('Current session is missing data.')\n        this._removeSession()\n      } else {\n        // should be handled on _recoverSession method already\n        // But we still need the code here to accommodate for AsyncStorage e.g. in React native\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (err) {\n      console.error(err)\n      return null\n    }\n  }\n\n  private async _callRefreshToken(refresh_token = this.currentSession?.refresh_token) {\n    try {\n      if (!refresh_token) {\n        throw new Error('No current session.')\n      }\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) throw error\n      if (!data) throw Error('Invalid session data.')\n\n      this._saveSession(data)\n      this._notifyAllSubscribers('TOKEN_REFRESHED')\n      this._notifyAllSubscribers('SIGNED_IN')\n\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent) {\n    this.stateChangeEmitters.forEach((x) => x.callback(event, this.currentSession))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private _saveSession(session: Session) {\n    this.currentSession = session\n    this.currentUser = session.user\n\n    const expiresAt = session.expires_at\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresIn = expiresAt - timeNow\n      const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000)\n    }\n\n    // Do we need any extra check before persist session\n    // access_token or user ?\n    if (this.persistSession && session.expires_at) {\n      this._persistSession(this.currentSession)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    const data = { currentSession, expiresAt: currentSession.expires_at }\n    setItemAsync(this.localStorage, STORAGE_KEY, data)\n  }\n\n  private async _removeSession() {\n    this.currentSession = null\n    this.currentUser = null\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    removeItemAsync(this.localStorage, STORAGE_KEY)\n  }\n\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds\n   */\n  private _startAutoRefreshToken(value: number) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    if (value <= 0 || !this.autoRefreshToken) return\n\n    this.refreshTokenTimer = setTimeout(async () => {\n      this.networkRetries++\n      const { error } = await this._callRefreshToken()\n      if (!error) this.networkRetries = 0\n      if (\n        error?.message === NETWORK_FAILURE.ERROR_MESSAGE &&\n        this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n      )\n        this._startAutoRefreshToken(NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100) // exponential backoff\n    }, value)\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref()\n  }\n\n  /**\n   * Listens for changes to LocalStorage and updates the current session.\n   */\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return false\n    }\n\n    try {\n      window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          if (newSession?.currentSession?.access_token) {\n            this._saveSession(newSession.currentSession)\n            this._notifyAllSubscribers('SIGNED_IN')\n          } else {\n            this._removeSession()\n            this._notifyAllSubscribers('SIGNED_OUT')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n    }\n  }\n\n  private _handleVisibilityChange() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return false\n    }\n\n    try {\n      window?.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible') {\n          this._recoverAndRefresh()\n        }\n      })\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}